from Bio.Data.PDBData import protein_letters_1to3
from utils import separate_antibody_chains, three_to_one
from get_torsion import CHIS
from networks_input import HEAVY_MAX_LENGTH


HEADER = "HEADER    IMMUNE SYSTEM - ANTIBODY                           \nTITLE     COMPUTATIONAL MODELING     \nREMARK 777 MODEL GENERATED BY FOLD&DOCK \n"
ATOM_LINE = "ATOM{}{}  {}{}{} {}{}{}{}{:.3f}{}{:.3f}{}{:.3f}  1.00{}{:.2f}           {}\n"
END_LINE = "END\n"
ANTIGEN_HEADER = "HEADER    IMMUNE SYSTEM - ANTIGEN                           \nTITLE     COMPUTATIONAL MODELING     \nREMARK 777 TRANSFORMATION GENERATED BY FOLD&DOCK \n"


def matrix_to_pdb_antibody(pdb_file, ab_seq, coord_matrix, write_end=True, conf=None):
    """
    convert antibody output to pdb file
    """

    heavy_seq, light_seq = separate_antibody_chains(ab_seq)

    pdb_file.write(HEADER)

    if light_seq is None: # Nanobody
        iter_values = zip([heavy_seq], ["H"], [0])
    else:
        iter_values = zip([heavy_seq, light_seq], ["H", "L"], [0, HEAVY_MAX_LENGTH])

    for heavy_light_seq, HL, pos in iter_values:
        i = 1
        k = 1
        for aa in range(len(heavy_light_seq)):
            second_space = (4 - len(str(i))) * " "
            three_letter_code = protein_letters_1to3[heavy_light_seq[aa]] if heavy_light_seq[aa] != "X" else "UNK"
            backbone = ["N", "CA", "C", "O", "CB"]
            chis = []
            for chi in ["chi1", "chi2", "chi3", "chi4", "chi5"]:
                if three_letter_code in CHIS[chi]:
                    chis.append(CHIS[chi][three_letter_code][-1])
            backbone = backbone + chis
            for j in range(len(backbone)):
                x, y, z = coord_matrix[aa + pos][3*j], coord_matrix[aa+ pos][3*j+1], coord_matrix[aa+ pos][3*j+2]
                if x == 0. and y == 0. and z == 0.: # no atom
                    continue
                b_factor = 0.00
                if conf is not None:
                    b_factor = conf[aa + pos]
                sixth_space = (6 - len("{:.2f}".format(b_factor))) * " "
                first_space = (7 - len(str(k))) * " "
                third_space = (12 - len("{:.3f}".format(x))) * " "
                forth_space = (8 - len("{:.3f}".format(y))) * " "
                fifth_space = (8 - len("{:.3f}".format(z))) * " "
                pdb_file.write(ATOM_LINE.format(first_space, k, backbone[j]," " * (4 - len(backbone[j])), three_letter_code,HL, second_space, i, third_space, x,forth_space, y,fifth_space, z, sixth_space, b_factor, backbone[j][0]))
                k += 1
            i += 1
    if write_end:
        pdb_file.write(END_LINE)


def matrix_to_pdb_antigen(pdb_file, antigen_seq, coord_matrix, write_end=True):
    """
    convert antigen output to pdb file
    """
    pdb_file.write(ANTIGEN_HEADER)

    i = 1
    k = 1
    for aa in range(len(antigen_seq)):
        second_space = (4 - len(str(i))) * " "
        three_letter_code = protein_letters_1to3[antigen_seq[aa]] if antigen_seq[aa] != "X" else "UNK"
        backbone = ["N", "CA", "C", "O", "CB"]
        chis = []
        for chi in ["chi1", "chi2", "chi3", "chi4", "chi5"]:
            if three_letter_code in CHIS[chi]:
                chis.append(CHIS[chi][three_letter_code][-1])
        backbone = backbone + chis
        for j in range(len(backbone)):
            x, y, z = coord_matrix[aa][3*j], coord_matrix[aa][3*j+1], coord_matrix[aa][3*j+2]
            if x == 0. and y == 0. and z == 0.: # no atom
                continue
            b_factor = 0.00
            sixth_space = (6 - len("{:.2f}".format(b_factor))) * " "
            first_space = (7 - len(str(k))) * " "
            third_space = (12 - len("{:.3f}".format(x))) * " "
            forth_space = (8 - len("{:.3f}".format(y))) * " "
            fifth_space = (8 - len("{:.3f}".format(z))) * " "
            pdb_file.write(ATOM_LINE.format(first_space, k, backbone[j]," " * (4 - len(backbone[j])), three_letter_code, "A", second_space, i, third_space, x,forth_space, y,fifth_space, z, sixth_space, b_factor, backbone[j][0]))
            k += 1
        i += 1
    if write_end:
        pdb_file.write(END_LINE)
